- hosts: localhost
  vars:
    openshift_ip: "172.17.0.1"
    openshift_hostname: "{{ openshift_ip }}.nip.io"
    miq_namespace: "miq"
    miq_username: "admin"
    miq_password: "smartvm"
  tasks:
  - name: oc whoami to get current login
    shell: "oc whoami"
    register: whoami

  - name: oc login as admin
    shell: "oc login -u admin -p admin"

  - name: oc whoami -t to get token
    shell: "oc whoami -t"
    register: token

  - name: oc login as original login again
    shell: "oc login -u {{ whoami.stdout }}"

  - name: oc patch ui dc to workaround api bugs
    shell: |
           oc patch -n {{ miq_namespace }} dc/ui --patch '
           { "spec": { "template": { "spec": { "containers": [{ "name": "ui", "image": "jmontleon/manageiq-ui-worker:latest" }]}}}}'

  - name: add cloud provider (This will retry until the patched pod comes up)
    uri:
      url: "https://manageiq-{{ miq_namespace }}.{{ openshift_hostname }}/api/providers"
      method: POST
      user: "{{ miq_username }}"
      password: "{{ miq_password }}"
      validate_certs: no
      body_format: json
      headers:
        Accept: application/json
      body: |
            {
              "name": "Openshift",
              "type": "ManageIQ::Providers::Openshift::ContainerManager",
              "zone_id": 1,
              "connection_configurations": [{
                "endpoint": {
                  "role": "default",
                  "hostname": "{{ openshift_ip }}",
                  "port": "8443",
                  "security_protocol": "ssl-without-validation"
                },
                "authentication": {
                  "role": "bearer",
                  "auth_key": "{{ token.stdout }}"
                }
              }]
            }
    register: result
    retries: 60
    delay: 5
    until: result.status == 200

  - name: add service dialog
    uri:
      url: "https://manageiq-{{ miq_namespace }}.{{ openshift_hostname }}/api/service_dialogs"
      method: POST
      user: "{{ miq_username }}"
      password: "{{ miq_password }}"
      validate_certs: no
      body_format: json
      headers:
        Accept: application/json
      body: |
            {
              "description": "Test",
              "label": "Test",
              "dialog_tabs": [{
                "description": "Test",
                "position": 0,
                "label": "Test",
                "dialog_groups": [{
                  "description": "Test",
                  "label": "Test",
                  "dialog_fields": [{
                    "name": "Test",
                    "label": "Test",
                    "type": "DialogFieldCheckBox"
                  }]
                }]
              }]
            }
    register: service_dialog

  - name: wait for container templates to populate.
    uri:
      url: "https://manageiq-{{ miq_namespace }}.{{ openshift_hostname }}/api/container_templates"
      method: GET
      user: "{{ miq_username }}"
      password: "{{ miq_password }}"
      validate_certs: no
      headers:
        Accept: application/json
    register: container_templates
    retries: 60
    delay: 5
    until: container_templates.json.count >= 9

  - name: add service template
    uri:
      url: "https://manageiq-{{ miq_namespace }}.{{ openshift_hostname }}/api/service_templates"
      method: POST
      user: "{{ miq_username }}"
      password: "{{ miq_password }}"
      validate_certs: no
      body_format: json
      headers:
        Accept: application/json
      body: |
            {
              "name":"Test",
              "description":"Test",
              "type":"ServiceTemplateContainerTemplate",
              "service_template_id":null,
              "service_type":"atomic",
              "prov_type":"generic_container_template",
              "config_info": {
                "provision": {
                  "container_template_id":"1000000000008",
                  "dialog_id": "{{ service_dialog.json.results.0.id }}",
                  "fqname":"/Service/Generic/StateMachines/GenericLifecycle/provision"
                }
              }
            }

  - name: oc patch asb dc to use PoC Broker
    shell: |
           oc patch -n ansibleservicebroker dc/asb --patch '
           { "spec": { "template": { "spec": { "containers": [{ "name": "asb", "image": "docker.io/jmontleon/origin-ansible-service-broker:latest" }]}}}}'
